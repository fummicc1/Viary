///
/// @Generated by Mockolo
///



import AVFoundation
import Combine
import Foundation
import Speech


public class SpeechToTextServiceMock: SpeechToTextService {
    public init() { }


    public var onTextUpdate: AnyPublisher<SpeechToTextModel, Never> { return self.onTextUpdateSubject.eraseToAnyPublisher() }
    public private(set) var onTextUpdateSubject = PassthroughSubject<SpeechToTextModel, Never>()

    public var permission: AnyPublisher<SpeechPermission, Never> { return self.permissionSubject.eraseToAnyPublisher() }
    public private(set) var permissionSubject = PassthroughSubject<SpeechPermission, Never>()

    public var error: AnyPublisher<SpeechToTextError, Never> { return self.errorSubject.eraseToAnyPublisher() }
    public private(set) var errorSubject = PassthroughSubject<SpeechToTextError, Never>()

    public var speechStatus: AnyPublisher<SpeechStatus, Never> { return self.speechStatusSubject.eraseToAnyPublisher() }
    public private(set) var speechStatusSubject = PassthroughSubject<SpeechStatus, Never>()

    public private(set) var changeCallCount = 0
    public var changeHandler: ((Locale) -> ())?
    public func change(locale: Locale)  {
        changeCallCount += 1
        if let changeHandler = changeHandler {
            changeHandler(locale)
        }
        
    }

    public private(set) var startCallCount = 0
    public var startHandler: (() async throws -> ())?
    public func start() async throws  {
        startCallCount += 1
        if let startHandler = startHandler {
            try await startHandler()
        }
        
    }

    public private(set) var stopCallCount = 0
    public var stopHandler: (() async throws -> ())?
    public func stop() async throws  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            try await stopHandler()
        }
        
    }
}


///
/// @Generated by Mockolo
///



import AVFoundation
import Combine
import Foundation
import Speech


public class SpeechToTextServiceMock: SpeechToTextService {
    public init() { }


    public private(set) var onTextUpdateSetCallCount = 0
    private var _onTextUpdate: AnyPublisher<SpeechToTextModel, Never>!  { didSet { onTextUpdateSetCallCount += 1 } }
    public var onTextUpdate: AnyPublisher<SpeechToTextModel, Never> {
        get { return _onTextUpdate }
        set { _onTextUpdate = newValue }
    }

    public private(set) var permissionSetCallCount = 0
    private var _permission: AnyPublisher<SpeechPermission, Never>!  { didSet { permissionSetCallCount += 1 } }
    public var permission: AnyPublisher<SpeechPermission, Never> {
        get { return _permission }
        set { _permission = newValue }
    }

    public private(set) var errorSetCallCount = 0
    private var _error: AnyPublisher<SpeechToTextError, Never>!  { didSet { errorSetCallCount += 1 } }
    public var error: AnyPublisher<SpeechToTextError, Never> {
        get { return _error }
        set { _error = newValue }
    }

    public private(set) var speechStatusSetCallCount = 0
    private var _speechStatus: AnyPublisher<SpeechStatus, Never>!  { didSet { speechStatusSetCallCount += 1 } }
    public var speechStatus: AnyPublisher<SpeechStatus, Never> {
        get { return _speechStatus }
        set { _speechStatus = newValue }
    }

    public private(set) var changeCallCount = 0
    public var changeHandler: ((Locale) async throws -> ())?
    public func change(locale: Locale) async throws  {
        changeCallCount += 1
        if let changeHandler = changeHandler {
            try await changeHandler(locale)
        }
        
    }

    public private(set) var startCallCount = 0
    public var startHandler: (() async throws -> ())?
    public func start() async throws  {
        startCallCount += 1
        if let startHandler = startHandler {
            try await startHandler()
        }
        
    }

    public private(set) var stopCallCount = 0
    public var stopHandler: (() async throws -> ())?
    public func stop() async throws  {
        stopCallCount += 1
        if let stopHandler = stopHandler {
            try await stopHandler()
        }
        
    }
}

